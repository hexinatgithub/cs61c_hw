Problem 1 - Useful Snippets

    In this section, we’ll take the same problem (that of printing a string) and approach it using different C
constructs. This should allow you to see how various C constructs are translated into MIPS.
    Suppose that we have a print function, but that this function only takes one character and prints it to
the screen. It expects the character to be in the lower 8 bits of $a0.

A) Translate into MIPS, while preserving the while loop structure:

void string_print(char *print_me) {
    while (*print_me != ’\0’) {
        print(*print_me);
        print_me++;
    }
}

string_print:
    addi $sp, $sp, -8
    sw $s0, 0($sp)
    sw $ra, 4($sp)

    add $s0, $a0, $zero # $s0=print_me
Loop:
    lb $t0, 0($s0)
    beq $t0, $zero, End
    add $a0, $t0, $zero 
    jal print
    addi $s0, $s0, 1
    j Loop
End:
    lw $s0, 0($sp)
    lw $ra, 4($sp)
    addi $sp, $sp, 8
    jr $ra

B) Translate into MIPS, while preserving the for loop structure (your function is given the string length):

void string_print(char *print_me, int slen) {
    for (int i = 0; i < slen; i++) {
        print(*(print_me+i));
    }
}

string_print:
    addi $sp, $sp, -16
    sw $s0, 0($sp)
    sw $s1, 4($sp)
    sw $s2, 8($sp)
    sw $ra, 12($sp)

    add $s0, $zero, $a0 # $s0=print_me
    add $s1, $zero, $a1 # $s1=slen
    add $s2, $zero, $zero  # $s2=i=0
Loop:
    add $t0, $s0, $s2
    lb $a0, 0($t0)
    jal print
    slt $t0, $s2, $s1
    beq $t0, $zero, End
    addi $s2, $s2, 1
    j Loop
End:
    lw $ra, 12($sp)
    lw $s2, 8($sp)
    lw $s1, 4($sp)
    lw $s0, 0($sp)
    addi $sp, $sp, 16
    jr $ra

C) Translate into MIPS, while preserving the do while loop structure:

void string_print(char *print_me) {
    if (!(*print_me)) {
        return;
    }
    do {
        print(*print_me);
        print_me++;
    } while (*print_me);
}

string_print:
    addi $sp, $sp, -8
    sw $s0, 0($sp)
    sw $ra, 4($sp)

    add $s0, $zero, $a0 # $s0=print_me
    lb $t0, 0($s0)
    beq $t0, $zero, End
Loop:
    lb $a0, 0($s0)
    jal print
    addi $s0, $s0, 1
    lb $t0, 0($s0)
    beq $t0, $zero, Loop
End:
    lw $ra, 4($sp)
    lw $s0, 0($sp)
    addi $sp, $sp, 8
    jr $ra

Problem 2 - Recursive Fibonacci

Convert the following recursive implementation of Fibonacci to MIPS. Do not convert it to an iterative
solution.

int fib(int n) {
    if (n == 0) {
        return 0;
    } else if (n == 1) {
        return 1;
    }
    return fib(n-1) + fib(n-2);
}

fib:
    addi $sp, $sp, -12
    sw $s0, 0($sp)
    sw $s1, 4($sp)
    sw $ra, 8($sp)

    addi $s0, $a0, $zero # $s0=n
    bne $s0, $zero, L1
    add $v0, $zero, $zero
    j End
L1
    addi $t0, $zero, 1
    bne $s0, $t0, L2
    addi $v0, $zero, 1
    j End
L2:
    addi $a0, $s0, -1
    jal fib
    add $s1, $v0, $zero
    addi $a0, $s0, -2
    jal fib
    add $v0, $s1, $v0
End:
    lw $ra, 8($sp)
    lw $s1, 4($sp)
    lw $s0, 0($sp)
    addi $sp, $sp, 12
    jr $ra

Problem 3 - Memoized Fibonacci

Now, modify your recursive Fibonacci implementation to memoize results. For the sake of simplicity, you
can assume that the array given to you (memolist) is at least n elements long for any n. Additionally, the
array is initialized to all zeros.

int fib(int n, int* memolist) {
    if (n == 0) {
        return 0;
    } else if (n == 1) {
        return 1;
    }
    if (memolist[n]) {
        return memolist[n];
    }
    memolist[n] = fib(n-1, memolist) + fib(n-2, memolist);
    return memolist[n];
}

fib:
    addi $sp, $sp, -16
    sw $s0, 0($sp)
    sw $s1, 4($sp)
    sw $s2, 8($sp)
    sw $ra, 12($sp)

    add $s0, $a0, $zero # $s0=n
    add $s1, $a1, $zero # $s1=memolist
    add $s2, $zero, $zero #result

    # if n == 0
    bne $s0, $zero, L1
    add $v0, $zero, $zero
    j End
L1:
    # if n == 1
    addi $t0, $zero, 1
    bne $a0, $t0, L2
    addi $v0, $zero, 1
    j End
L2:
    # if memolist[n] != 0
    sll $t0, $s0, 2
    add $t0, $t0, $s1
    lw $v0, 0($t0)
    beq $v0, $zero, L3
    j End
L3:
    addi $a0, $s0, -1
    add $a1, $s1, $zero
    jal fib
    add $s2, $v0, $zero
    addi $a0, $s0, -2
    add $a1, $s1, $zero
    jal fib
    add $v0, $s2, $v0
    sll $t0, $s0, 2
    add $t0, $t0, $s1
    sw $v0, 0($t0)
End:
    lw $ra, 12($sp)
    lw $s2, 8($sp)
    lw $s1, 4($sp)
    lw $s0, 0($sp)
    addi $sp, $sp, 16
    jr $ra

Problem 4 - Self-Modifying MIPS

Write a MIPS function that performs identically to this code when called many times in a row, but does not
store the static variable in the static segment (or even the heap or stack):

short nextshort() {
    static short a = 0;
    return a++;
}

Tips/Hints:
• You can assume that the short type is 16 bits wide. shorts represent signed numbers.
• You can assume that your MIPS code is allowed to modify any part of memory.
• See the title of this question.

nextshort:
    addiu $v0, $0, 0
    la $t0, nextshort
    lw $t1, 0($t0)
    addiu $t3, $0, 0xFFFF
    and $t2, $t1, $t3
    beq $t2, $t3, HandleSpecial
    addiu $t1, $t1, 1
    sw $t1, 0($t0) # store incremented instruction
    jr $ra # ret value is already in v0
HandleSpecial : # here, handle the overflow case
    la $t6 , backupinst
    lw $t1, 0($t6)
    sw $t1, 0($t0)
    jr $ra # retvalue is already in v0
backupinst:
    addiu $v0, $0, 0